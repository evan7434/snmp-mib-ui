version: '3.8'

# 针对中国大陆部署优化的 Docker Compose 配置
# 使用国内镜像源，优化网络连接和下载速度

services:
  # PostgreSQL 数据库 - 使用阿里云镜像
  postgres:
    image: registry.cn-hangzhou.aliyuncs.com/library/postgres:15-alpine
    container_name: snmp-mib-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mib_platform}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
      TZ: Asia/Shanghai
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - snmp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-mib_platform}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis 缓存 - 使用阿里云镜像
  redis:
    image: registry.cn-hangzhou.aliyuncs.com/library/redis:7-alpine
    container_name: snmp-mib-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    environment:
      TZ: Asia/Shanghai
    networks:
      - snmp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Go 后端 API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.china
      args:
        - GOPROXY=https://goproxy.cn,direct
        - GOSUMDB=sum.golang.google.cn
    container_name: snmp-mib-backend
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - PORT=8080
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/${POSTGRES_DB:-mib_platform}?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - TZ=Asia/Shanghai
      - GOPROXY=https://goproxy.cn,direct
      - GOSUMDB=sum.golang.google.cn
    volumes:
      - ./uploads:/app/uploads
      - ./mibs:/opt/monitoring/mibs
      - ./config:/opt/monitoring/config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - snmp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Next.js 前端应用
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.china
      args:
        - NPM_REGISTRY=https://registry.npmmirror.com
        - NODE_ENV=production
    container_name: snmp-mib-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      - TZ=Asia/Shanghai
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - snmp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Nginx 反向代理 - 使用阿里云镜像
  nginx:
    image: registry.cn-hangzhou.aliyuncs.com/library/nginx:alpine
    container_name: snmp-mib-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.china.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    environment:
      TZ: Asia/Shanghai
    depends_on:
      - frontend
      - backend
    networks:
      - snmp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis

networks:
  snmp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16