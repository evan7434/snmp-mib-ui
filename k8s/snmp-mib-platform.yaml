apiVersion: v1
kind: ConfigMap
metadata:
  name: snmp-mib-platform-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: snmp-mib-platform
    app.kubernetes.io/component: config
data:
  config.yaml: |
    server:
      port: 8080
      host: "0.0.0.0"
    
    database:
      host: postgres
      port: 5432
      name: mib_platform
      user: postgres
      password: postgres123
      sslmode: disable
    
    redis:
      host: redis
      port: 6379
      password: ""
      db: 0
    
    mib:
      directory: "/opt/monitoring/mibs"
      upload_directory: "/app/uploads/mibs"
    
    config:
      snmp_exporter_path: "/opt/monitoring/config/snmp_exporter/snmp.yml"
      categraf_path: "/opt/monitoring/config/categraf/input.snmp/snmp.toml"
    
    logging:
      level: "info"
      format: "json"

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: monitoring
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: secret
type: Opaque
data:
  postgres-password: cG9zdGdyZXMxMjM=  # postgres123

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-storage
  namespace: monitoring
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: monitoring
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_DB
          value: mib_platform
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1
            memory: 2Gi
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: postgres-storage

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: monitoring
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: service
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: postgres
    protocol: TCP
    name: postgres
  selector:
    app.kubernetes.io/name: postgres

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: monitoring
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        args:
        - redis-server
        - --appendonly
        - "yes"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: monitoring
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: service
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: redis
    protocol: TCP
    name: redis
  selector:
    app.kubernetes.io/name: redis

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: snmp-mib-platform-storage
  namespace: monitoring
  labels:
    app.kubernetes.io/name: snmp-mib-platform
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: snmp-mib-platform-backend
  namespace: monitoring
  labels:
    app.kubernetes.io/name: snmp-mib-platform
    app.kubernetes.io/component: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: snmp-mib-platform
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: snmp-mib-platform
        app.kubernetes.io/component: backend
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:15
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done
      containers:
      - name: backend
        image: snmp-mib-platform:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: CONFIG_FILE
          value: /etc/config/config.yaml
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: storage
          mountPath: /opt/monitoring
        - name: uploads
          mountPath: /app/uploads
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1
            memory: 2Gi
      volumes:
      - name: config
        configMap:
          name: snmp-mib-platform-config
      - name: storage
        persistentVolumeClaim:
          claimName: snmp-mib-platform-storage
      - name: uploads
        emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: snmp-mib-platform-frontend
  namespace: monitoring
  labels:
    app.kubernetes.io/name: snmp-mib-platform
    app.kubernetes.io/component: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: snmp-mib-platform
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: snmp-mib-platform
        app.kubernetes.io/component: frontend
    spec:
      containers:
      - name: frontend
        image: snmp-mib-platform-frontend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NEXT_PUBLIC_API_URL
          value: http://snmp-mib-platform-backend:8080
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: snmp-mib-platform-backend
  namespace: monitoring
  labels:
    app.kubernetes.io/name: snmp-mib-platform
    app.kubernetes.io/component: backend-service
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: snmp-mib-platform
    app.kubernetes.io/component: backend

---
apiVersion: v1
kind: Service
metadata:
  name: snmp-mib-platform-frontend
  namespace: monitoring
  labels:
    app.kubernetes.io/name: snmp-mib-platform
    app.kubernetes.io/component: frontend-service
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: snmp-mib-platform
    app.kubernetes.io/component: frontend

---
apiVersion: v1
kind: Service
metadata:
  name: snmp-mib-platform-nodeport
  namespace: monitoring
  labels:
    app.kubernetes.io/name: snmp-mib-platform
    app.kubernetes.io/component: service-external
spec:
  type: NodePort
  ports:
  - port: 3000
    targetPort: http
    protocol: TCP
    name: http
    nodePort: 30080
  selector:
    app.kubernetes.io/name: snmp-mib-platform
    app.kubernetes.io/component: frontend